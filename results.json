{"_links":{"root":{"href":"/"},"self":{"href":"/scans/86ef198a-355c-41b9-a089-5804a50055a3/findings"},"help":{"href":"https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"}},"scan_id":"86ef198a-355c-41b9-a089-5804a50055a3","scan_status":"SUCCESS","message":"Scan successful. Results size: 5354 bytes","modules":["verademo.jar"],"modules_count":1,"findings":[{"title":"java.sql.Statement.executeUpdate","issue_id":1000,"gob":"B","severity":4,"issue_type_id":"taint","issue_type":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","cwe_id":"89","display_text":"\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeUpdate() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate() contains tainted data. The tainted data originated from an earlier call to SQLVulnerabilitiy.main.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href=\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href=\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e","files":{"source_file":{"file":"SQLVulnerabilitiy.java","line":15,"function_name":"main","qualified_function_name":"SQLVulnerabilitiy.main","function_prototype":"void main(java.lang.String  [])","scope":"SQLVulnerabilitiy"}},"flaw_match":{"procedure_hash":"660583163","prototype_hash":"87565764","flaw_hash":"2184604571","flaw_hash_count":1,"flaw_hash_ordinal":1,"cause_hash":"4150276259","cause_hash_count":1,"cause_hash_ordinal":1,"cause_hash2":"4151334018","cause_hash2_ordinal":"1"},"stack_dumps":{"stack_dump":[{"Frame":[{"FrameId":"0","FunctionName":"main","SourceFile":"SQLVulnerabilitiy.java","SourceLine":"14","SourceFileId":"3","StatementText":{},"VarNames":"\"INSERT INTO table (name) VALUES ('\" + /**X-VC scoperef targetid=\"26821\" */scanner/**X-VC /scoperef */.nextLine() + \"');\"","QualifiedFunctionName":"SQLVulnerabilitiy.main","FunctionPrototype":"void main(java.lang.String  [])","Scope":"SQLVulnerabilitiy","RelativeLocation":"77"},{"FrameId":"1","FunctionName":"main","SourceFile":"SQLVulnerabilitiy.java","SourceLine":"14","SourceFileId":"3","StatementText":{},"VarNames":"/**X-VC scoperef targetid=\"26821\" */scanner/**X-VC /scoperef */.nextLine()","QualifiedFunctionName":"SQLVulnerabilitiy.main","FunctionPrototype":"void main(java.lang.String  [])","Scope":"SQLVulnerabilitiy","RelativeLocation":"77"},{"FrameId":"2","FunctionName":"main","SourceFile":"SQLVulnerabilitiy.java","SourceLine":"12","SourceFileId":"3","StatementText":{},"VarNames":"/**X-VC scoperef targetid=\"9823\" */java.lang.System.in/**X-VC /scoperef */","QualifiedFunctionName":"SQLVulnerabilitiy.main","FunctionPrototype":"void main(java.lang.String  [])","Scope":"SQLVulnerabilitiy","RelativeLocation":"34"},{"FrameId":"3","FunctionName":"main","SourceFile":"SQLVulnerabilitiy.java","SourceLine":"9","SourceFileId":"3","StatementText":{},"QualifiedFunctionName":"SQLVulnerabilitiy.main","FunctionPrototype":"void main(java.lang.String  [])","Scope":"SQLVulnerabilitiy","RelativeLocation":"0"}]}]},"flaw_details_link":"https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"},{"title":"java.sql.DriverManager.getConnection","issue_id":1001,"gob":"B","severity":3,"issue_type_id":"reliability","issue_type":"Use of Hard-coded Password","cwe_id":"259","display_text":"\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. java.sql.DriverManager.getConnection\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href=\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e","files":{"source_file":{"file":"SQLVulnerabilitiy.java","line":12,"function_name":"main","qualified_function_name":"SQLVulnerabilitiy.main","function_prototype":"void main(java.lang.String  [])","scope":"SQLVulnerabilitiy"}},"flaw_match":{"procedure_hash":"660583163","prototype_hash":"87565764","flaw_hash":"664694180","flaw_hash_count":1,"flaw_hash_ordinal":1,"cause_hash":"4216237831","cause_hash_count":1,"cause_hash_ordinal":1,"cause_hash2":"0","cause_hash2_ordinal":"0"},"stack_dumps":{"stack_dump":[{"Frame":[{"FrameId":"0","FunctionName":"main","SourceFile":"SQLVulnerabilitiy.java","SourceLine":"11","SourceFileId":"3","StatementText":{}}]}]},"flaw_details_link":"https://downloads.veracode.com/securityscan/cwe/v4/java/259.html"}]}